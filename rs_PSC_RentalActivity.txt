//notes 
  Script Name : rs_PSC_RentalActivity.txt
  Client Name : Public Storage
  Created On  : 2025-07-18
  Created By  : Beril Pehlivan
  Description : YSR - Rental Activity
  Modified On : 

//end notes 

//select header
select 
  distinct 
  unitTypeSums.PropertyId,
  unitTypeSums.PropertyName,
  unitTypeSums.Property_Code,
  unitTypeSums.Legal_Entity,
  'Property: ' + unitTypeSums.Property_Code + ' - ' + unitTypeSums.Legal_Entity as Property,
    DATENAME(WEEKDAY, CAST('#FromDate#' AS DATETIME)) + ', ' +
  DATENAME(MONTH, CAST('#FromDate#' AS DATETIME)) + ' ' +
  CAST(DAY(CAST('#FromDate#' AS DATETIME)) AS VARCHAR) + ', ' +
  CAST(YEAR(CAST('#FromDate#' AS DATETIME)) AS VARCHAR) 
  + ' to ' +
  DATENAME(WEEKDAY, CAST('#ToDate#' AS DATETIME)) + ', ' +
  DATENAME(MONTH, CAST('#ToDate#' AS DATETIME)) + ' ' +
  CAST(DAY(CAST('#ToDate#' AS DATETIME)) AS VARCHAR) + ', ' +
  CAST(YEAR(CAST('#ToDate#' AS DATETIME)) AS VARCHAR) 
  AS ReportDateRange
from (
select  p.hMy PropertyId,
				 p.scode Property_Code, 
   				 p.sAddr1 PropertyName,
				 ut.sDesc UnitType,
				 ut.hMy UnitTypeId,
         o.ulastname Legal_Entity
		 from unit u
		 inner join property p on p.hMy = u.hProperty
		 inner join unittype ut on ut.hMy = u.hUnitType
     inner join owner o on p.hlegalentity = o.hmyperson
		 where 1=1
		-- and u.hProperty IN(964)
      --and p.hmy in (964)
	  #conditions#
 and ISNULL(p.iTypeStorage, 0) in (1,-1) 
		 group by p.hMy, p.sAddr1, ut.sDesc, ut.hMy, p.scode, o.ulastname
) unitTypeSums

//end select 

//select display 
select
  distinct unitTypeSums.PropertyId,
  unitTypeSums.PropertyName,
  unitTypeSums.Property_Code,
  unitTypeSums.UnitType UnitType,
  unitTypeSums.UnitTypeId,
  unitTypeSums.Rent UnitRent,
  unitTypeSums.UnitArea UnitArea,
  unitTypeSums.TotalUnits TotalUnits,
  unitTypeSums.BegOcc StartOcc,
  unitTypeSums.MoveIns MoveIns,
  unitTypeSums.MoveOuts MoveOuts,
  (unitTypeSums.EndOcc - unitTypeSums.BegOcc) NetOcc,
  unitTypeSums.EndOcc EndOcc,
  unitTypeSums.ResFuture FutureRes,
  unitTypeSums.NotReady VacNotReady,
  unitTypeSums.Unavailable Unavailable,
  unitTypeSums.EndArea OccArea,
  unitTypeSums.TotalArea TotalArea,
  case isnull(unitTypeSums.TotalArea, 0) when 0 then 0 else round(
    cast(unitTypeSums.EndArea as float) / cast(unitTypeSums.TotalArea as float),
    4
  )  * 100 end OccSqFt,
  case isnull(unitTypeSums.TotalUnits, 0) when 0 then 0 else round(
    cast(unitTypeSums.EndOcc as float) / cast(unitTypeSums.TotalUnits as float),
    4
  ) * 100 end OccPerc,
CASE 
    WHEN ISNULL(unitTypeSums.TotalArea, 0) = 0 THEN 0 
    ELSE ROUND(
        (
            (CAST(unitTypeSums.EndOcc AS FLOAT) - CAST(unitTypeSums.BegOcc AS FLOAT)) 
            * CAST(unitTypeSums.UnitArea AS FLOAT)
        ) / CAST(unitTypeSums.TotalArea AS FLOAT),
        4
    ) * 100 
END AS SqFtChange,
  discounts.UnitTypeDesc,
  discounts.Description as DiscountDescription
from
  (
    select
      p.hMy PropertyId,
      p.scode Property_Code,
      p.sAddr1 PropertyName,
      ut.sDesc UnitType,
      ut.hMy UnitTypeId,
      u.dSqFt UnitArea,
      sum(
        case when endus.hMy is not null
        and endus.sStatus NOT IN(N'Excluded', N'Admin', N'Model', N'Down') then isnull(uh.cRent, u.SRENT) else 0 end
      ) Rent,
      sum(
        case when endus.hMy is not null
        and endus.sStatus NOT IN(N'Excluded', N'Admin', N'Model', N'Down') then 1 else 0 end
      ) TotalUnits,
      sum(
        case when begus.sStatus IN(
          N'Notice Unrented',
          N'Notice Rented',
          N'Occupied No Notice'
        ) then 1 else 0 end
      ) BegOcc,
      sum(isnull(MoveIns.totalCount, 0)) MoveIns,
      sum(isnull(MoveOuts.totalCount, 0)) MoveOuts,
      sum(
        case when endus.sStatus IN(
          N'Notice Unrented',
          N'Notice Rented',
          N'Occupied No Notice'
        ) then 1 else 0 end
      ) EndOcc,
      sum(
        case when endus.sStatus IN(
          N'Notice Rented'
        ) then 1 else 0 end
      ) ResFuture,
      sum(
        case when endus.sStatus IN(
          N'Vacant Rented Not Ready'
        ) then 1 else 0 end
      ) NotReady,
      sum(
        case when endus.sStatus IN(
          N'Vacant Unrented Not Ready'
        ) then 1 else 0 end
      ) Unavailable,
      sum(
        case when endus.sStatus IN(
          N'Notice Unrented',
          N'Notice Rented',
          N'Occupied No Notice'
        ) then isnull(uh.dSqft, u.DSQFT) else 0 end
      ) EndArea,
      sum(
        case when endus.hMy is not null
        and endus.sStatus NOT IN(N'Excluded', N'Admin', N'Model', N'Down') then isnull(uh.dSqft, u.DSQFT) else 0 end
      ) TotalArea
    from
      unit u
      inner join property p on p.hMy = u.hProperty
      inner join unittype ut on ut.hMy = u.hUnitType
      left outer join unit_history uh ON uh.hMy = (
        select
          max(uh2.hMy)
        from
          unit_history uh2
        where
          uh2.hUnit = u.hMy
          and convert(date, uh2.dtDate, 101) <= convert(
            date,
            convert(datetime, N'#ToDate#', 101),
            101
          )
      )
      left outer join unit_status begus ON begus.hMy = (
        select
          max(us.hMy)
        from
          unit_status us
        where
          us.hUnit = u.hMy
          and convert(date, us.dtStart, 101) <= convert(
            date,
            convert(datetime, N'#FromDate#', 101),
            101
          )
          and (
            us.dtEnd is null
            or convert(date, us.dtEnd, 101) > convert(
              date,
              convert(datetime, N'#FromDate#', 101),
              101
            )
          )
      )
      left outer join unit_status endus ON endus.hMy = (
        select
          max(us2.hMy)
        from
          unit_status us2
        where
          us2.hUnit = u.hMy
          and convert(date, us2.dtStart, 101) <= convert(
            date,
            convert(datetime, N'#ToDate#', 101),
            101
          )
          and (
            us2.dtEnd is null
            or convert(date, us2.dtEnd, 101) > convert(
              date,
              convert(datetime, N'#ToDate#', 101),
              101
            )
          )
      )
      cross apply(
        select
          count(us3.hMy) totalCount
        from
          unit_status us3
        where
          us3.hUnit = u.hMy
          and convert(date, us3.dtStart, 101) <= convert(
            date,
            convert(datetime, N'#ToDate#', 101),
            101
          )
          and convert(date, us3.dtStart, 101) >= convert(
            date,
            convert(datetime, N'#FromDate#', 101),
            101
          )
          and us3.sStatus = N'Occupied No Notice'
      ) MoveIns
      cross apply(
        select
          count(us4.hMy) totalCount
        from
          unit_status us4
          inner join unit_status prevus4 on prevus4.hMy = (
            select
              max(us5.hMy)
            from
              unit_status us5
            where
              us5.hUnit = us4.hUnit
              and us5.hMy < us4.hMy
          )
        where
          us4.hUnit = u.hMy
          and convert(date, us4.dtStart, 101) <= convert(
            date,
            convert(datetime, N'#ToDate#', 101),
            101
          )
          and convert(date, us4.dtStart, 101) >= convert(
            date,
            convert(datetime, N'#ToDate#', 101),
            101
          )
          and us4.sStatus IN(
            N'Vacant Unrented Not Ready',
            N'Vacant Unrented Ready',
            N'Vacant Rented Not Ready',
            N'Vacant Rented Ready'
          )
          and prevus4.sStatus IN(
            N'Occupied No Notice',
            N'Notice Unrented',
            N'Notice Rented'
          )
      ) MoveOuts
    where
      1 = 1 
      #conditions#
      and ISNULL(p.iTypeStorage, 0) in (1, -1)
    group by
      p.hMy,
      p.sAddr1,
      ut.sDesc,
      ut.hMy,
      u.dSqFt,
      p.scode
  ) unitTypeSums
  left join (
  
    select
      distinct ls.hproperty as PropertyId,
      ut.hmy as UnitTypeId,
      ut.sdesc as UnitTypeDesc,
      ls.sDesc as Description
    from
      LeasingSpecials ls
      join UNITTYPE ut on ls.hUnitType = ut.HMY
      join chargtyp ct on ls.hchargecode = ct.hmy
      inner join property p on p.hmy = ls.hproperty
    where
      1 = 1 
      #conditions#
  ) discounts on discounts.PropertyId = unitTypeSums.PropertyId
  and discounts.UnitTypeId = unitTypeSums.UnitTypeId
order by
  unitTypeSums.PropertyName,
  unitTypeSums.UnitType,
  unitTypeSums.Property_Code

//end select 